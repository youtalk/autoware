name: docker-build-cache

on:
  pull_request:
  workflow_dispatch:
    inputs:
      artifacts-destination:
        type: choice
        description: Destination for the artifacts
        options:
          - registry
          - tarball
        default: tarball

jobs:
  load-env:
    uses: ./.github/workflows/load-env.yaml

  docker-build-cache:
    needs: load-env
    runs-on: buildjet-16vcpu-ubuntu-2204
    strategy:
      fail-fast: false
      matrix:
        name:
          - no-cuda
          - cuda
        include:
          - name: no-cuda
            platform: amd64
            base_image_env: base_image
            lib_dir: x86_64
            setup-args: --no-nvidia
            additional-tag-suffix: ""
          - name: cuda
            platform: amd64
            base_image_env: base_image
            lib_dir: x86_64
            additional-tag-suffix: -cuda
    steps:
      - name: Check if PR author is the specific user
        id: author-check
        run: |
          PR_AUTHOR=$(jq -r '.pull_request.user.login' "$GITHUB_EVENT_PATH")
          if [[ "$PR_AUTHOR" == "youtalk" ]]; then
            echo "$PR_AUTHOR is a target user"
            echo "author-found=true" >> $GITHUB_OUTPUT
          else
            echo "$PR_AUTHOR is not a target user"
            echo "author-found=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set git config
        uses: autowarefoundation/autoware-github-actions/set-git-config@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install vcstool
        run: |
          sudo apt-get -y update
          sudo apt-get -y install python3-pip
          pip install --no-cache-dir vcstool
        shell: bash

      - name: Run vcs import
        run: |
          mkdir src
          vcs import src < autoware.repos
        shell: bash

      - name: Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            root-ccache
          key: cache-${{ matrix.platform }}-${{ matrix.name }}-${{ hashFiles('autoware.repos') }}
          restore-keys: |
            cache-${{ matrix.platform }}-${{ matrix.name }}-
            cache-${{ matrix.platform }}-

      - name: Inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "root-ccache": "/root/.ccache"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build 'Autoware' cache
        uses: docker/build-push-action@v5
        with:
          file: docker/Dockerfile
          context: .
          push: false
          build-args: |
            ROS_DISTRO=${{ needs.load-env.outputs.rosdistro }}
            BASE_IMAGE=${{ needs.load-env.outputs[format('{0}', matrix.base_image_env)] }}
            SETUP_ARGS=${{ matrix.setup-args }}
            LIB_DIR=${{ matrix.lib_dir }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-buildcache:${{ matrix.name }}-${{ matrix.platform }}-main
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-buildcache:${{ matrix.name }}-${{ matrix.platform }}-main,mode=max

      - name: Show disk space
        run: |
          df -h
